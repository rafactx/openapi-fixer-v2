#!/usr/bin/env python3
"""
Script para Corre√ß√£o de Erros Sem√¢nticos em Paths OpenAPI

Este script aplica corre√ß√µes espec√≠ficas para resolver problemas sem√¢nticos
em defini√ß√µes de paths que violam a especifica√ß√£o OpenAPI.

Uso:
    python fix_semantic_paths.py <caminho_para_openapi.json>

Exemplo:
    python fix_semantic_paths.py ./openapi.json

Corre√ß√µes aplicadas:
    1. Remove requestBody inv√°lido de opera√ß√£o DELETE
    2. Remove par√¢metro 'name' inexistente no template da URL
    3. Adiciona par√¢metro 'environmentId' ausente (formFields)
    4. Adiciona par√¢metro 'environmentId' ausente (shoppingcenter)
"""

import json
import sys
import os
from typing import Dict, Any, List, Optional


class SemanticPathsFixer:
    """Classe para corrigir erros sem√¢nticos em paths OpenAPI."""

    def __init__(self, openapi_path: str):
        """
        Inicializa o corretor com o caminho do arquivo OpenAPI.

        Args:
            openapi_path: Caminho para o arquivo openapi.json
        """
        self.openapi_path = openapi_path
        self.openapi_doc = None
        self.corrections_applied = 0

    def load_document(self) -> None:
        """Carrega o documento OpenAPI."""
        if not os.path.exists(self.openapi_path):
            raise FileNotFoundError(f"Arquivo n√£o encontrado: {self.openapi_path}")

        with open(self.openapi_path, 'r', encoding='utf-8') as file:
            try:
                self.openapi_doc = json.load(file)
                print(f"‚úì Documento OpenAPI carregado: {self.openapi_path}")
            except json.JSONDecodeError as e:
                raise json.JSONDecodeError(f"Erro ao decodificar JSON: {e.msg}", e.doc, e.pos)

    def navigate_to_operation(self, json_path: str) -> Optional[Dict[str, Any]]:
        """
        Navega at√© uma opera√ß√£o espec√≠fica no documento.

        Args:
            json_path: Caminho no formato "paths./path/template/method"

        Returns:
            Dicion√°rio da opera√ß√£o ou None se n√£o encontrada
        """
        # Parse do caminho: "paths./environments/{environmentId}/employees/{employeeId}/scheduledvisits/delete"
        if not json_path.startswith("paths."):
            return None

        path_part = json_path[6:]  # Remove "paths."

        # Separar path template do m√©todo HTTP
        path_segments = path_part.split('/')
        method = path_segments[-1]  # √öltimo segmento √© o m√©todo
        path_template = '/' + '/'.join(path_segments[:-1])  # Reconstr√≥i o path template

        # Navegar no documento
        if "paths" not in self.openapi_doc:
            return None

        if path_template not in self.openapi_doc["paths"]:
            return None

        path_obj = self.openapi_doc["paths"][path_template]
        if method not in path_obj:
            return None

        return path_obj[method]

    def navigate_to_path_object(self, json_path: str) -> Optional[Dict[str, Any]]:
        """
        Navega at√© um objeto de path espec√≠fico no documento.

        Args:
            json_path: Caminho no formato "paths./path/template/method"

        Returns:
            Dicion√°rio do path object ou None se n√£o encontrado
        """
        if not json_path.startswith("paths."):
            return None

        path_part = json_path[6:]  # Remove "paths."

        # Separar path template do m√©todo HTTP
        path_segments = path_part.split('/')
        method = path_segments[-1]  # √öltimo segmento √© o m√©todo
        path_template = '/' + '/'.join(path_segments[:-1])  # Reconstr√≥i o path template

        # Navegar no documento
        if "paths" not in self.openapi_doc:
            return None

        if path_template not in self.openapi_doc["paths"]:
            return None

        return self.openapi_doc["paths"][path_template]

    def correction_1_remove_delete_request_body(self) -> None:
        """
        Corre√ß√£o 1: Remove requestBody de opera√ß√£o DELETE.
        Path: /environments/{environmentId}/employees/{employeeId}/scheduledvisits
        """
        print("\nüîß Corre√ß√£o 1: Removendo requestBody de opera√ß√£o DELETE...")

        json_path = "paths./environments/{environmentId}/employees/{employeeId}/scheduledvisits/delete"
        operation = self.navigate_to_operation(json_path)

        if operation is None:
            print("‚ö†Ô∏è  Opera√ß√£o n√£o encontrada:", json_path)
            return

        if "requestBody" in operation:
            del operation["requestBody"]
            self.corrections_applied += 1
            print("‚úì requestBody removido da opera√ß√£o DELETE")
        else:
            print("‚ÑπÔ∏è  requestBody n√£o encontrado na opera√ß√£o DELETE")

    def correction_2_remove_name_parameter(self) -> None:
        """
        Corre√ß√£o 2: Remove par√¢metro 'name' inexistente.
        Path: /environments/{environmentId}/brands
        """
        print("\nüîß Corre√ß√£o 2: Removendo par√¢metro 'name' inexistente...")

        json_path = "paths./environments/{environmentId}/brands/get"
        operation = self.navigate_to_operation(json_path)

        if operation is None:
            print("‚ö†Ô∏è  Opera√ß√£o n√£o encontrada:", json_path)
            return

        if "parameters" not in operation:
            print("‚ÑπÔ∏è  Nenhum par√¢metro encontrado na opera√ß√£o")
            return

        # Procurar e remover par√¢metro 'name'
        parameters = operation["parameters"]
        original_count = len(parameters)

        # Filtrar par√¢metros, removendo aqueles com name='name'
        operation["parameters"] = [
            param for param in parameters
            if not (isinstance(param, dict) and param.get("name") == "name")
        ]

        removed_count = original_count - len(operation["parameters"])
        if removed_count > 0:
            self.corrections_applied += 1
            print(f"‚úì {removed_count} par√¢metro(s) 'name' removido(s)")
        else:
            print("‚ÑπÔ∏è  Par√¢metro 'name' n√£o encontrado")

    def correction_3_add_environment_id_form_fields(self) -> None:
        """
        Corre√ß√£o 3: Adiciona par√¢metro environmentId ausente.
        Path: /v1/{environmentId}/form/formFields/{formId}
        """
        print("\nüîß Corre√ß√£o 3: Adicionando par√¢metro 'environmentId' (formFields)...")

        json_path = "paths./v1/{environmentId}/form/formFields/{formId}/get"
        operation = self.navigate_to_operation(json_path)

        if operation is None:
            print("‚ö†Ô∏è  Opera√ß√£o n√£o encontrada:", json_path)
            return

        # Garantir que existe array de parameters
        if "parameters" not in operation:
            operation["parameters"] = []

        # Verificar se environmentId j√° existe
        existing_env_param = any(
            isinstance(param, dict) and param.get("name") == "environmentId"
            for param in operation["parameters"]
        )

        if not existing_env_param:
            environment_param = {
                "name": "environmentId",
                "in": "path",
                "required": True,
                "description": "ID do Environment (ambiente).",
                "schema": {
                    "type": "string"
                }
            }
            operation["parameters"].append(environment_param)
            self.corrections_applied += 1
            print("‚úì Par√¢metro 'environmentId' adicionado")
        else:
            print("‚ÑπÔ∏è  Par√¢metro 'environmentId' j√° existe")

    def correction_4_add_environment_id_shopping_center(self) -> None:
        """
        Corre√ß√£o 4: Adiciona par√¢metro environmentId ausente.
        Path: /v1/{environmentId}/shoppingcenter/{id}
        """
        print("\nüîß Corre√ß√£o 4: Adicionando par√¢metro 'environmentId' (shoppingcenter)...")

        json_path = "paths./v1/{environmentId}/shoppingcenter/{id}/get"
        operation = self.navigate_to_operation(json_path)

        if operation is None:
            print("‚ö†Ô∏è  Opera√ß√£o n√£o encontrada:", json_path)
            return

        # Garantir que existe array de parameters
        if "parameters" not in operation:
            operation["parameters"] = []

        # Verificar se environmentId j√° existe
        existing_env_param = any(
            isinstance(param, dict) and param.get("name") == "environmentId"
            for param in operation["parameters"]
        )

        if not existing_env_param:
            environment_param = {
                "name": "environmentId",
                "in": "path",
                "required": True,
                "description": "ID do Environment (ambiente).",
                "schema": {
                    "type": "string"
                }
            }
            operation["parameters"].append(environment_param)
            self.corrections_applied += 1
            print("‚úì Par√¢metro 'environmentId' adicionado")
        else:
            print("‚ÑπÔ∏è  Par√¢metro 'environmentId' j√° existe")

    def validate_paths_semantics(self) -> None:
        """Executa valida√ß√µes b√°sicas na estrutura de paths."""
        print("\nüîç Validando sem√¢ntica dos paths...")

        if "paths" not in self.openapi_doc:
            print("‚ö†Ô∏è  Nenhum objeto 'paths' encontrado")
            return

        validation_issues = []

        # Verificar paths processados
        paths_to_check = [
            "/environments/{environmentId}/employees/{employeeId}/scheduledvisits",
            "/environments/{environmentId}/brands",
            "/v1/{environmentId}/form/formFields/{formId}",
            "/v1/{environmentId}/shoppingcenter/{id}"
        ]

        for path_template in paths_to_check:
            if path_template in self.openapi_doc["paths"]:
                path_obj = self.openapi_doc["paths"][path_template]

                # Verificar opera√ß√£o DELETE n√£o tem requestBody
                if "delete" in path_obj:
                    delete_op = path_obj["delete"]
                    if "requestBody" in delete_op:
                        validation_issues.append(f"DELETE {path_template} ainda tem requestBody")

                # Verificar se par√¢metros de path est√£o definidos
                for method, operation in path_obj.items():
                    if method.lower() in ['get', 'post', 'put', 'patch', 'delete']:
                        if isinstance(operation, dict):
                            # Extrair par√¢metros do template da URL
                            import re
                            path_params = re.findall(r'\{([^}]+)\}', path_template)

                            # Verificar se todos os par√¢metros est√£o definidos
                            defined_params = set()
                            if "parameters" in operation:
                                for param in operation["parameters"]:
                                    if isinstance(param, dict) and param.get("in") == "path":
                                        defined_params.add(param.get("name"))

                            missing_params = set(path_params) - defined_params
                            if missing_params:
                                validation_issues.append(
                                    f"{method.upper()} {path_template} est√° faltando par√¢metros: {missing_params}"
                                )

        if validation_issues:
            print(f"‚ö†Ô∏è  {len(validation_issues)} problemas de valida√ß√£o encontrados:")
            for issue in validation_issues:
                print(f"    ‚Ä¢ {issue}")
        else:
            print("‚úì Valida√ß√£o sem√¢ntica passou sem problemas")

    def save_document(self) -> None:
        """Salva o documento OpenAPI modificado."""
        print(f"\nüíæ Salvando documento modificado...")

        with open(self.openapi_path, 'w', encoding='utf-8') as file:
            json.dump(self.openapi_doc, file, indent=2, ensure_ascii=False)

        print(f"‚úì Arquivo salvo: {self.openapi_path}")

    def generate_summary_report(self) -> None:
        """Gera um relat√≥rio resumo das corre√ß√µes."""
        print("\n" + "=" * 60)
        print("üìä RELAT√ìRIO DE CORRE√á√ïES SEM√ÇNTICAS")
        print("=" * 60)

        print(f"üîß Total de corre√ß√µes aplicadas: {self.corrections_applied}")

        if self.corrections_applied > 0:
            print("\nCorre√ß√µes realizadas:")
            print("  ‚úì Remo√ß√£o de requestBody inv√°lido em DELETE")
            print("  ‚úì Remo√ß√£o de par√¢metros inexistentes")
            print("  ‚úì Adi√ß√£o de par√¢metros de path ausentes")
            print("\n‚úÖ Todos os problemas sem√¢nticos foram corrigidos!")
            print("   ‚Ä¢ Opera√ß√µes DELETE n√£o t√™m requestBody")
            print("   ‚Ä¢ Par√¢metros de path est√£o corretamente definidos")
            print("   ‚Ä¢ Documento OpenAPI est√° em conformidade com a especifica√ß√£o")
        else:
            print("\n‚úÖ Nenhuma corre√ß√£o foi necess√°ria!")
            print("   ‚Ä¢ O documento j√° estava semanticamente correto")

    def fix_semantic_paths(self) -> None:
        """Executa o processo completo de corre√ß√£o sem√¢ntica."""
        print("üöÄ Iniciando corre√ß√£o de erros sem√¢nticos em paths...")
        print("=" * 60)

        try:
            # Carregar documento
            self.load_document()

            # Aplicar corre√ß√µes espec√≠ficas
            self.correction_1_remove_delete_request_body()
            self.correction_2_remove_name_parameter()
            self.correction_3_add_environment_id_form_fields()
            self.correction_4_add_environment_id_shopping_center()

            # Validar resultado
            self.validate_paths_semantics()

            # Salvar documento
            self.save_document()

            # Gerar relat√≥rio
            self.generate_summary_report()

        except Exception as e:
            print(f"\n‚ùå Erro durante a corre√ß√£o: {e}")
            sys.exit(1)


def main():
    """Fun√ß√£o principal que processa argumentos de linha de comando."""
    if len(sys.argv) != 2:
        print("Uso: python fix_semantic_paths.py <caminho_para_openapi.json>")
        print("\nExemplo:")
        print("  python fix_semantic_paths.py ./openapi.json")
        print("\nEste script ir√° aplicar 4 corre√ß√µes sem√¢nticas espec√≠ficas:")
        print("  1. Remover requestBody de opera√ß√£o DELETE")
        print("  2. Remover par√¢metro 'name' inexistente")
        print("  3. Adicionar par√¢metro 'environmentId' ausente (formFields)")
        print("  4. Adicionar par√¢metro 'environmentId' ausente (shoppingcenter)")
        sys.exit(1)

    openapi_path = sys.argv[1]

    # Executar corre√ß√µes
    fixer = SemanticPathsFixer(openapi_path)
    fixer.fix_semantic_paths()


if __name__ == "__main__":
    main()
