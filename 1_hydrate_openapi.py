#!/usr/bin/env python3
"""
Script Mestre de Hidrata√ß√£o OpenAPI

Este script orquestra o enriquecimento completo de uma especifica√ß√£o OpenAPI
usando arquivos de configura√ß√£o e dicion√°rios como fontes da verdade.

Depend√™ncias:
    pip install PyYAML

Uso:
    python hydrate_openapi.py openapi.json config.yaml dictionary.json summaries-pt-br.json

Transforma√ß√µes aplicadas (em ordem):
    1. Inje√ß√£o de metadados (info, servers)
    2. Inje√ß√£o de seguran√ßa (securitySchemes, security)
    3. Inje√ß√£o de schemas comuns
    4. Tradu√ß√£o recursiva de placeholders
    5. Inje√ß√£o de summaries das opera√ß√µes
    6. Inje√ß√£o de respostas de erro padr√£o
    7. Adi√ß√£o de par√¢metros globais
    8. Ordena√ß√£o de tags
"""

import json
import sys
import os
import re
from typing import Dict, Any, List
import yaml


class OpenAPIHydrator:
    """Classe principal para hidrata√ß√£o de especifica√ß√µes OpenAPI."""

    def __init__(self, openapi_path: str, config_path: str, dictionary_path: str, summaries_path: str):
        """
        Inicializa o hidratador com os caminhos dos arquivos.

        Args:
            openapi_path: Caminho para o arquivo openapi.json
            config_path: Caminho para o arquivo config.yaml
            dictionary_path: Caminho para o arquivo dictionary.json
            summaries_path: Caminho para o arquivo summaries-pt-br.json
        """
        self.openapi_path = openapi_path
        self.config_path = config_path
        self.dictionary_path = dictionary_path
        self.summaries_path = summaries_path

        # Dados carregados
        self.openapi_doc = None
        self.config = None
        self.dictionary = None
        self.summaries = None

    def load_files(self) -> None:
        """Carrega todos os arquivos de entrada."""
        print("üìÇ Carregando arquivos de entrada...")

        # Carregar OpenAPI JSON
        with open(self.openapi_path, 'r', encoding='utf-8') as f:
            self.openapi_doc = json.load(f)
        print(f"‚úì OpenAPI carregado: {self.openapi_path}")

        # Carregar Config YAML
        with open(self.config_path, 'r', encoding='utf-8') as f:
            self.config = yaml.safe_load(f)
        print(f"‚úì Config carregado: {self.config_path}")

        # Carregar Dictionary JSON
        with open(self.dictionary_path, 'r', encoding='utf-8') as f:
            self.dictionary = json.load(f)
        print(f"‚úì Dictionary carregado: {self.dictionary_path}")

        # Carregar Summaries JSON
        with open(self.summaries_path, 'r', encoding='utf-8') as f:
            self.summaries = json.load(f)
        print(f"‚úì Summaries carregado: {self.summaries_path}")

    def inject_metadata(self) -> None:
        """Injeta metadados (info e servers) do config."""
        print("\nüè∑Ô∏è  Injetando metadados...")

        # Injetar info
        self.openapi_doc["info"] = self.config["metadata"]["info"]
        print("‚úì Objeto 'info' injetado")

        # Injetar servers
        self.openapi_doc["servers"] = self.config["metadata"]["servers"]
        print("‚úì Array 'servers' injetado")

    def inject_security(self) -> None:
        """Injeta esquemas de seguran√ßa e configura√ß√£o global."""
        print("\nüîí Injetando configura√ß√µes de seguran√ßa...")

        # Garantir que existe components
        if "components" not in self.openapi_doc:
            self.openapi_doc["components"] = {}

        # Garantir que existe securitySchemes
        if "securitySchemes" not in self.openapi_doc["components"]:
            self.openapi_doc["components"]["securitySchemes"] = {}

        # Injetar security schemes do config
        for scheme_name, scheme_config in self.config["security_schemes"].items():
            self.openapi_doc["components"]["securitySchemes"][scheme_name] = scheme_config
            print(f"‚úì Security scheme '{scheme_name}' injetado")

        # Injetar security global (assumindo BasicAuth como padr√£o)
        self.openapi_doc["security"] = [{"BasicAuth": []}]
        print("‚úì Configura√ß√£o de seguran√ßa global aplicada")

    def inject_common_schemas(self) -> None:
        """Injeta schemas comuns em components.schemas."""
        print("\nüìã Injetando schemas comuns...")

        # Garantir que existe components.schemas
        if "components" not in self.openapi_doc:
            self.openapi_doc["components"] = {}
        if "schemas" not in self.openapi_doc["components"]:
            self.openapi_doc["components"]["schemas"] = {}

        # Injetar schemas comuns
        for schema_name, schema_def in self.config["common_schemas"].items():
            self.openapi_doc["components"]["schemas"][schema_name] = schema_def
            print(f"‚úì Schema comum '{schema_name}' injetado")

    def translate_placeholders_recursive(self, obj: Any) -> Any:
        """
        Traduz placeholders recursivamente no objeto.

        Args:
            obj: Objeto a ser processado

        Returns:
            Objeto com placeholders traduzidos
        """
        if isinstance(obj, dict):
            result = {}
            for key, value in obj.items():
                # Traduzir chave se for um placeholder
                new_key = self.dictionary.get(key, key)
                result[new_key] = self.translate_placeholders_recursive(value)
            return result
        elif isinstance(obj, list):
            return [self.translate_placeholders_recursive(item) for item in obj]
        elif isinstance(obj, str):
            # Traduzir string se for um placeholder
            return self.dictionary.get(obj, obj)
        else:
            return obj

    def translate_placeholders(self) -> None:
        """Aplica tradu√ß√£o recursiva de placeholders."""
        print("\nüåê Traduzindo placeholders...")

        self.openapi_doc = self.translate_placeholders_recursive(self.openapi_doc)
        print(f"‚úì {len(self.dictionary)} placeholders processados")

    def inject_summaries(self) -> None:
        """Injeta summaries nas opera√ß√µes usando summaries-pt-br.json."""
        print("\nüìù Injetando summaries das opera√ß√µes...")

        summaries_count = 0

        # Percorrer paths e opera√ß√µes
        if "paths" in self.openapi_doc:
            for path, path_obj in self.openapi_doc["paths"].items():
                if isinstance(path_obj, dict):
                    for method, operation in path_obj.items():
                        if method.lower() in ['get', 'post', 'put', 'patch', 'delete', 'options', 'head']:
                            if isinstance(operation, dict) and "operationId" in operation:
                                operation_id = operation["operationId"]
                                if operation_id in self.summaries:
                                    operation["summary"] = self.summaries[operation_id]
                                    summaries_count += 1

        print(f"‚úì {summaries_count} summaries injetados")

    def determine_error_response_type(self, path: str) -> str:
        """
        Determina o tipo de resposta de erro baseado no path.

        Args:
            path: Path da opera√ß√£o

        Returns:
            'v3' ou 'legacy'
        """
        # L√≥gica: v3 para paths que come√ßam com /v3 ou /environments
        if path.startswith('/v3') or path.startswith('/environments'):
            return 'v3'
        return 'legacy'

    def inject_error_responses(self) -> None:
        """Injeta respostas de erro padr√£o nas opera√ß√µes."""
        print("\n‚ùå Injetando respostas de erro padr√£o...")

        operations_updated = 0

        # Percorrer paths e opera√ß√µes
        if "paths" in self.openapi_doc:
            for path, path_obj in self.openapi_doc["paths"].items():
                if isinstance(path_obj, dict):
                    # Determinar tipo de erro para este path
                    error_type = self.determine_error_response_type(path)
                    error_responses = self.config["default_error_responses"][error_type]

                    for method, operation in path_obj.items():
                        if method.lower() in ['get', 'post', 'put', 'patch', 'delete', 'options', 'head']:
                            if isinstance(operation, dict):
                                # Garantir que existe responses
                                if "responses" not in operation:
                                    operation["responses"] = {}

                                # Adicionar respostas de erro se n√£o existirem
                                for status_code, error_response in error_responses.items():
                                    if status_code not in operation["responses"]:
                                        operation["responses"][status_code] = error_response
                                        operations_updated += 1

        print(f"‚úì Respostas de erro adicionadas a {operations_updated} opera√ß√µes")

    def inject_global_parameters(self) -> None:
        """Adiciona par√¢metros globais a todas as opera√ß√µes."""
        print("\nüîß Injetando par√¢metros globais...")

        operations_updated = 0

        # Garantir que existe components.parameters
        if "components" not in self.openapi_doc:
            self.openapi_doc["components"] = {}
        if "parameters" not in self.openapi_doc["components"]:
            self.openapi_doc["components"]["parameters"] = {}

        # Adicionar par√¢metros globais a components
        for param_name, param_def in self.config["global_parameters"].items():
            self.openapi_doc["components"]["parameters"][param_name] = param_def

        # Percorrer opera√ß√µes e adicionar refer√™ncias aos par√¢metros
        if "paths" in self.openapi_doc:
            for path, path_obj in self.openapi_doc["paths"].items():
                if isinstance(path_obj, dict):
                    for method, operation in path_obj.items():
                        if method.lower() in ['get', 'post', 'put', 'patch', 'delete', 'options', 'head']:
                            if isinstance(operation, dict):
                                # Garantir que existe parameters
                                if "parameters" not in operation:
                                    operation["parameters"] = []

                                # Adicionar refer√™ncias aos par√¢metros globais
                                for param_name in self.config["global_parameters"].keys():
                                    param_ref = {"$ref": f"#/components/parameters/{param_name}"}
                                    if param_ref not in operation["parameters"]:
                                        operation["parameters"].append(param_ref)

                                operations_updated += 1

        print(f"‚úì Par√¢metros globais adicionados a {operations_updated} opera√ß√µes")

    def apply_tag_ordering(self) -> None:
        """Aplica ordena√ß√£o de tags conforme configura√ß√£o."""
        print("\nüè∑Ô∏è  Aplicando ordena√ß√£o de tags...")

        if "ui_ordering" in self.config and "tag_order" in self.config["ui_ordering"]:
            tag_order = self.config["ui_ordering"]["tag_order"]

            # Coletar tags existentes no documento
            existing_tags = set()
            if "paths" in self.openapi_doc:
                for path_obj in self.openapi_doc["paths"].values():
                    if isinstance(path_obj, dict):
                        for operation in path_obj.values():
                            if isinstance(operation, dict) and "tags" in operation:
                                existing_tags.update(operation["tags"])

            # Criar array de tags ordenado
            ordered_tags = []
            for tag_name in tag_order:
                if tag_name in existing_tags:
                    ordered_tags.append({
                        "name": tag_name,
                        "description": f"Opera√ß√µes relacionadas a {tag_name.lower()}"
                    })

            # Adicionar tags que n√£o est√£o na ordem configurada
            for tag_name in existing_tags:
                if tag_name not in tag_order:
                    ordered_tags.append({
                        "name": tag_name,
                        "description": f"Opera√ß√µes relacionadas a {tag_name.lower()}"
                    })

            # Aplicar ao documento
            self.openapi_doc["tags"] = ordered_tags
            print(f"‚úì {len(ordered_tags)} tags ordenadas")
        else:
            print("‚ö†Ô∏è  Configura√ß√£o de ordena√ß√£o de tags n√£o encontrada")

    def save_document(self) -> None:
        """Salva o documento OpenAPI modificado."""
        print(f"\nüíæ Salvando documento modificado...")

        with open(self.openapi_path, 'w', encoding='utf-8') as f:
            json.dump(self.openapi_doc, f, indent=2, ensure_ascii=False)

        print(f"‚úì Arquivo salvo: {self.openapi_path}")

    def hydrate(self) -> None:
        """Executa o processo completo de hidrata√ß√£o."""
        print("üöÄ Iniciando hidrata√ß√£o do OpenAPI...")
        print("=" * 50)

        try:
            # Carregar arquivos
            self.load_files()

            # Aplicar transforma√ß√µes em ordem
            self.inject_metadata()
            self.inject_security()
            self.inject_common_schemas()
            self.translate_placeholders()
            self.inject_summaries()
            self.inject_error_responses()
            self.inject_global_parameters()
            self.apply_tag_ordering()

            # Salvar resultado
            self.save_document()

            print("\n" + "=" * 50)
            print("üéâ Hidrata√ß√£o conclu√≠da com sucesso!")
            print("\nO arquivo OpenAPI foi enriquecido com:")
            print("  ‚Ä¢ Metadados completos (info, servers)")
            print("  ‚Ä¢ Configura√ß√µes de seguran√ßa")
            print("  ‚Ä¢ Schemas de erro padronizados")
            print("  ‚Ä¢ Tradu√ß√µes de placeholders")
            print("  ‚Ä¢ Summaries das opera√ß√µes")
            print("  ‚Ä¢ Respostas de erro padr√£o")
            print("  ‚Ä¢ Par√¢metros globais")
            print("  ‚Ä¢ Ordena√ß√£o de tags")

        except Exception as e:
            print(f"\n‚ùå Erro durante a hidrata√ß√£o: {e}")
            sys.exit(1)


def validate_files(openapi_path: str, config_path: str, dictionary_path: str, summaries_path: str) -> None:
    """
    Valida se todos os arquivos de entrada existem.

    Args:
        openapi_path: Caminho para openapi.json
        config_path: Caminho para config.yaml
        dictionary_path: Caminho para dictionary.json
        summaries_path: Caminho para summaries-pt-br.json
    """
    files_to_check = [
        (openapi_path, "OpenAPI JSON"),
        (config_path, "Config YAML"),
        (dictionary_path, "Dictionary JSON"),
        (summaries_path, "Summaries JSON")
    ]

    missing_files = []
    for file_path, file_type in files_to_check:
        if not os.path.exists(file_path):
            missing_files.append(f"{file_type}: {file_path}")

    if missing_files:
        print("‚ùå Arquivos n√£o encontrados:")
        for missing in missing_files:
            print(f"  ‚Ä¢ {missing}")
        sys.exit(1)


def main():
    """Fun√ß√£o principal que processa argumentos e executa a hidrata√ß√£o."""
    if len(sys.argv) != 5:
        print("Uso: python hydrate_openapi.py <openapi.json> <config.yaml> <dictionary.json> <summaries-pt-br.json>")
        print("\nExemplo:")
        print("  python hydrate_openapi.py openapi.json config.yaml dictionary.json summaries-pt-br.json")
        sys.exit(1)

    openapi_path = sys.argv[1]
    config_path = sys.argv[2]
    dictionary_path = sys.argv[3]
    summaries_path = sys.argv[4]

    # Validar arquivos
    validate_files(openapi_path, config_path, dictionary_path, summaries_path)

    # Executar hidrata√ß√£o
    hydrator = OpenAPIHydrator(openapi_path, config_path, dictionary_path, summaries_path)
    hydrator.hydrate()


if __name__ == "__main__":
    main()
